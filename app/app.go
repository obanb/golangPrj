package app

import (
	"awesomeProject/app/mock/activeEndpoint"
	"awesomeProject/app/mock/socket"
	_ "awesomeProject/docs" // docs is generated by Swag CLI, you have to import it.
	"awesomeProject/domain"
	"awesomeProject/logger"
	"awesomeProject/service"
	"bytes"
	"fmt"
	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
	"golang.org/x/sync/errgroup"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"time"
)

var (
	g errgroup.Group
)

func CORSMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {

		c.Header("Access-Control-Allow-Origin", "*")
		c.Header("Access-Control-Allow-Headers", "*")

		if c.Request.Method == "OPTIONS" {
			fmt.Println("OPS")
			c.AbortWithStatus(204)
			return
		}

		c.Next()
	}
}

func Start() {
	//router := mux.NewRouter()

	initAppServerHandler := func() *gin.Engine {
		h := gin.New()
		h.Use(gin.Recovery())
		return h
	}
	appServerHandler := initAppServerHandler()
	appServerHandler.Use(CORSMiddleware())

	initProxyServerHandler := func() *gin.Engine {
		h := gin.New()
		h.Use(gin.Recovery())
		return h
	}

	proxyServerHandler := initProxyServerHandler()

	appSvr := &http.Server{
		Addr:         ":8081",
		Handler:      appServerHandler,
		ReadTimeout:  5 * time.Second,
		WriteTimeout: 10 * time.Second,
	}

	proxySvr := &http.Server{
		Addr:         ":8082",
		Handler:      proxyServerHandler,
		ReadTimeout:  5 * time.Second,
		WriteTimeout: 10 * time.Second,
	}

	proxyUrls := proxyServerHandler.Group("/")
	proxyUrls.Use(gin.Logger())

	RequestLoggerMiddleware := func() gin.HandlerFunc {
		return func(c *gin.Context) {
			fmt.Println("middle")
			var buf bytes.Buffer
			tee := io.TeeReader(c.Request.Body, &buf)
			body, _ := ioutil.ReadAll(tee)
			c.Request.Body = ioutil.NopCloser(&buf)
			log.Println(string(body))
			c.Next()
		}
	}

	proxyUrls.POST("/eventLog", RequestLoggerMiddleware())

	url := ginSwagger.URL("http://localhost:8080/swagger/doc.json") // The url pointing to API definition

	appServerHandler.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler, url))

	//mySqlClient := getMySqlClient("root:root@tcp(localhost:3306)/banking")
	mongoClient := getMongoClient(MongoDbUrl)

	// local db/service repositories
	//customerRepositoryDb := domain.NewCustomerRepositoryDb(mySqlClient)
	//accountRepositoryDb := domain.NewAccountRepositoryDb(mySqlClient)
	userRepository := domain.NewUserRepository(mongoClient)
	issueRepository := domain.NewIssueRepositorySql(mongoClient)
	dbReportRepository := domain.NewDbReportRepository(mongoClient)
	// remote db repositories

	// rest handlers
	//ch := CustomerHandlers{service: service.NewCustomerService(customerRepositoryDb)}
	//ah := AccountHandlers{service: service.NewAccountService(accountRepositoryDb)}
	uh := UserHandler{service: service.NewUserService(userRepository)}
	ih := IssueHandlers{service: service.NewIssueService(issueRepository)}
	dbh := DbReportHandlers{service: service.NewDbReportService(dbReportRepository)}
	dh := DownloadHandler{xlsxService: service.NewDbXlsxService(), fileService: service.NewFileService(mongoClient)}
	jsdh := JsonDataHandlers{}
	//ch := CustomerHandlers{service: service.NewCustomerService(domain.NewCustomerRepositoryStub())}

	//// rest routes
	//router.HandleFunc("/customers", ch.getAllCustomers).Methods(http.MethodGet)
	//router.HandleFunc("/customers/{customer_id:[0-9]+}", ch.getCustomer).Methods(http.MethodGet)
	//router.HandleFunc("/customers/{customer_id:[0-9]+}/account", ah.newAccount).Methods(http.MethodPost)
	//router.
	//	HandleFunc("/customers/{customer_id:[0-9]+}/account/{account_id:[0-9]+}", ah.MakeTransaction).
	//	Methods(http.MethodPost).
	//	Name("NewTransaction")

	appServerHandler.POST("/signup", uh.SignUpUser)
	appServerHandler.POST("/register", jsdh.RegisterEndpoint(appServerHandler, "/register2"))

	appServerHandler.GET("/issues", ih.getAllIssues)

	appServerHandler.GET("/download", dh.downloadXlsx)
	appServerHandler.GET("/downloadById", dh.downloadById)

	appServerHandler.POST("/issue", ih.CreateIssue)
	//m
	appServerHandler.POST("/issuemongo", ih.CreateIssueMongo)

	appServerHandler.POST("/issue/create_many", ih.CreateIssues)

	appServerHandler.POST("/dbreport", dbh.CreateDbReport)

	appServerHandler.GET("/home", home)
	appServerHandler.GET("/register", register)
	appServerHandler.GET("/login", login)
	//appServerHandler.GET("/ws", wsEndpoint)

	appServerHandler.GET("/registerActiveEndpoint", registerActiveEndpoint)
	//appServerHandler.POST("/registerActiveEndpoint", jsdh.RegisterActiveEndpoint())
	//appServerHandler.POST("/activeEndpointAction", jsdh.HandleActiveEndpointAction)

	appServerHandler.POST("/registerActiveEndpoint", activeEndpoint.RegisterEndpointHandler())
	appServerHandler.POST("/runActiveEndpointCmd", activeEndpoint.RunCmdhandler())
	appServerHandler.GET("/registeredEndpoints", activeEndpoint.RegisteredEndpointsHandler())

	appServerHandler.GET("/ws", socket.WsConnections.WsEndpoint)

	go listenToWsChannel()

	fileServer := http.FileServer(http.Dir("./static/"))
	appServerHandler.GET("/static/", func(c *gin.Context) { http.StripPrefix("/static", fileServer) })

	// starting server
	fmt.Print(mongoClient.Database(MongoDbName).Collection("ucty").Name())
	//log.Fatal(http.ListenAndServe(fmt.Sprintf("%s:%s", "localhost", "8000"), router))
	g.Go(func() error {
		logger.Info("Http server start..")
		return appSvr.ListenAndServe()
	})
	g.Go(func() error {
		logger.Info("Proxy server start..")
		return proxySvr.ListenAndServe()
	})
	if err := g.Wait(); err != nil {
		log.Fatal(err)
	}
}
